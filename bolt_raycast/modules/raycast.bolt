from contextlib import contextmanager
from math import ceil
from bolt import Runtime
from bolt.contrib.defer import Defer
from bolt_raycast:if_new_block_pos import IfNewBlockPos
from bolt_raycast:detect_block import DetectBlock
from bolt_raycast:detect_entity import DetectEntities

runtime = ctx.inject(Runtime)
defer = ctx.inject(Defer)

class RayStep:
    def __init__(self, ray, first, new_block_pos_tag):
        self._ray = ray
        self._first = first
        self._new_block_pos_tag = new_block_pos_tag

    @property
    def ray(self):
        return self._ray

    def detect_entities(
        self,
        # TODO: support arbitrary selector arguments
        id = None, # : str | list[str] | None # Single entity type, single entity_type tag, list of entity types / entity_type tags, or use None to indicate all entity types
        ):

        if isinstance(id, list):
            ids = id
            id = f"{self._parent}/entities"
            entity_type_tag id {"values":ids}
            id = "#" + id

        return DetectEntities(self._ray, id)

    @property
    def new_block_pos_tag(self):
        return self._new_block_pos_tag

    # TODO: Support providing an existing selector for the helper entity
    def is_new_block_pos(self, tag="bolt_raycast.block_pos"):
        if self._first:
            if self._new_block_pos_tag is None:
                self._new_block_pos_tag = tag
            
            return True
        
        if tag != self._new_block_pos_tag:
            raise ValueError("tag must not change inside a single loop")
        
        return IfNewBlockPos(self._ray)

    # check if the current block matches
    def detect_block(
        self,
        # TODO: support arbitrary block predicate
        id, # : str | list[str] # Single block ID, single block tag, or list of block IDs / block tags
        ):

        if isinstance(id, list):
            ids = id
            id = f"{self._parent}/blocks"
            block_tag id {
                "values": ids
            }
            id = "#" + id

        return DetectBlock(self._ray, id)

class Ray:
    _stop_requested = False

    def __init__(self, parent, tag, objective, step_size, steps):
        self._parent = parent
        self._tag = tag
        self._objective = objective
        self._step_size = step_size
        self._steps = steps
    
    def __iter__(self):
        # TODO: Only add & remove tag if detect_entities or is_new_block_pos is used?
        if self._tag is not None:
            tag @s add self._tag
        
        scoreboard players set #distance self._objective 0

        @defer
        def init_hit():
            if self._stop_requested:
                scoreboard players set #hit self._objective 0

        name = self.sub_path("step")

        def check_recurse(checking_pos):
            def recurse():
                if score #distance self._objective matches (None, self._steps):
                    if checking_pos:
                        execute function self.sub_path("move_pos"):
                            align xyz tp @s ~0.5 ~0.5 ~0.5
                            positioned ^ ^ ^self._step_size function name
                    else:
                        positioned ^ ^ ^self._step_size function name
            
            if self._stop_requested:
                if score #hit self._objective matches 0:
                    recurse()
            else:
                recurse()
        
        step = RayStep(self, True, None)

        with runtime.scope() as cmds:
            yield step
            scoreboard players add #distance self._objective 1
            check_recurse(False)

        block_pos_tag = step.new_block_pos_tag
        if block_pos_tag:
            step = RayStep(self, False, block_pos_tag)
            function name:
                yield step
                scoreboard players add #distance self._objective 1
                check_recurse(True)
            
            summon minecraft:marker ~ ~ ~ {Tags:[block_pos_tag]}
            o = 0.001 # offset so that dx can find the marker correctly
            execute
                positioned ~-o ~-o ~-o
                as @e[type=minecraft:marker,tag=block_pos_tag,dx=0,limit=1]
                positioned ~o ~o ~o
                function self.sub_path("init_ray"):
                    align xyz tp @s ~0.5 ~0.5 ~0.5
                    execute function self.sub_path("first_step"):
                        runtime.commands.extend(cmds)
                    kill @s
        else:
            execute function name:
                runtime.commands.extend(cmds)

        if self._tag is not None:
            tag @s remove self._tag

    def stop(self):
        self._stop_requested = True
        scoreboard players set #hit self._objective 1
    
    def sub_path(self, path):
        return f"{self._parent}/{path}"

    @property
    def initiator_tag(self):
        return self._tag

    @property
    def objective(self):
        return self._objective

    @property
    def step_size(self):
        return self._step_size
    
    @property
    def max_steps(self):
        return self._steps

    def emit_block(self, block_name, cmds):
        if len(cmds) == 1:
            runtime.commands.extend(cmds)
        else:
            execute function self.sub_path(block_name):
                runtime.commands.extend(cmds)

used_objectives = set()
load_func = generate_path()
added_load = False

def create_objective(objective):
    if objective not in used_objectives:
        used_objectives.add(objective)
        global added_load
        if not added_load:
            added_load = True
            prepend function_tag minecraft:load {"values": [load_func]}
        
        append function load_func:
            scoreboard objectives add objective dummy

# TODO: Support using a score for blocks/steps

@contextmanager
def raycast(*,
    blocks = None,                   # : int | None
    steps = None,                    # : int | None
    parent = None,                   # : str | None
    tag = "bolt_raycast.source",     # : str | None
    objective = "bolt_raycast.temp", # : str
    step_size = 0.1,                 # : float
    ):
    create_objective(objective)

    # Must use parentheses here to prevent collision with the `if blocks` implicit execute subcommand
    if (blocks is None):
        if steps is None:
            # Default distance is 10 blocks
            steps = ceil(10 / step_size)
    else:
        if steps is None:
            steps = ceil(blocks / step_size)
        else:
            raise ValueError("Cannot specify both a block distance and a step count")

    name_spec = "raycast_{incr}"
    if parent:
        if not parent.endswith("/"):
            parent = parent + "/"
            
        with ctx.override(generate_path = parent) as no_prefix:
            parent = no_prefix.generate.path(name_spec)
    else:
        parent = generate_path(name_spec)
    
    ray = Ray(parent, tag, objective, step_size, steps)
    execute function ray.sub_path("run_ray"):
        yield ray